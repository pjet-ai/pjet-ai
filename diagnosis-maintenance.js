// ================================================================
// SCRIPT DE DIAGN√ìSTICO - MANTENIMIENTO ORION OCG
// Verificaci√≥n multicapa de conexi√≥n, autenticaci√≥n y datos
// ================================================================

import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n desde variables de entorno
const SUPABASE_URL = 'https://vvazmdauzaexknybbnfc.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2YXptZGF1emFleGtueWJibmZjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY3NzkxNjQsImV4cCI6MjA3MjM1NTE2NH0.5JaUnsAz1RKkt8A7U2Mt4S3y23yQuYaaFFBlcl0RZGE';

console.log('üöÄ INICIANDO DIAGN√ìSTICO COMPLETO - ORION OCG MAINTENANCE');
console.log('========================================================');

// Crear cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function runDiagnosis() {
  try {
    console.log('\nüìã PASO 1: Verificaci√≥n de conexi√≥n b√°sica');
    console.log('URL:', SUPABASE_URL);
    console.log('Key length:', SUPABASE_ANON_KEY.length);

    // Test de conexi√≥n b√°sica
    const { data, error } = await supabase.from('invoices').select('count', { count: 'exact', head: true });

    if (error) {
      console.error('‚ùå ERROR DE CONEXI√ìN:', error.message);
      console.error('C√≥digo:', error.code);
      console.error('Detalles:', error.details);
      return;
    }

    console.log('‚úÖ CONEXI√ìN ESTABLECIDA CORRECTAMENTE');
    console.log('üìä Total de invoices en tabla:', data?.length || 0);

    console.log('\nüìã PASO 2: Verificaci√≥n de vistas SQL');

    // Verificar aviation_audit_view
    console.log('\nüîç Verificando aviation_audit_view...');
    const { data: auditView, error: auditError } = await supabase
      .from('aviation_audit_view')
      .select('*')
      .limit(1);

    if (auditError) {
      console.error('‚ùå ERROR EN aviation_audit_view:', auditError.message);
    } else {
      console.log('‚úÖ aviation_audit_view accesible');
      console.log('üìä Datos:', auditView?.[0] || 'Sin datos');
    }

    // Verificar maintenance_invoice_summary_view
    console.log('\nüîç Verificando maintenance_invoice_summary_view...');
    const { data: summaryView, error: summaryError } = await supabase
      .from('maintenance_invoice_summary_view')
      .select('*')
      .limit(5);

    if (summaryError) {
      console.error('‚ùå ERROR EN maintenance_invoice_summary_view:', summaryError.message);
    } else {
      console.log('‚úÖ maintenance_invoice_summary_view accesible');
      console.log('üìä Registros encontrados:', summaryView?.length || 0);
      if (summaryView && summaryView.length > 0) {
        console.log('üìã Primer registro:', JSON.stringify(summaryView[0], null, 2));
      }
    }

    // Verificar maintenance_stats_view
    console.log('\nüîç Verificando maintenance_stats_view...');
    const { data: statsView, error: statsError } = await supabase
      .from('maintenance_stats_view')
      .select('*')
      .limit(1);

    if (statsError) {
      console.error('‚ùå ERROR EN maintenance_stats_view:', statsError.message);
    } else {
      console.log('‚úÖ maintenance_stats_view accesible');
      console.log('üìä Datos:', statsView?.[0] || 'Sin datos');
    }

    console.log('\nüìã PASO 3: Verificaci√≥n de tablas base y relaciones');

    // Verificar tabla invoices
    console.log('\nüîç Verificando tabla invoices...');
    const { data: invoices, error: invoicesError } = await supabase
      .from('invoices')
      .select('*')
      .limit(3);

    if (invoicesError) {
      console.error('‚ùå ERROR EN TABLA invoices:', invoicesError.message);
    } else {
      console.log('‚úÖ Tabla invoices accesible');
      console.log('üìä Total invoices:', invoices?.length || 0);
      if (invoices && invoices.length > 0) {
        console.log('üìã Primer invoice:', JSON.stringify(invoices[0], null, 2));
      }
    }

    // Verificar tabla discrepancies
    console.log('\nüîç Verificando tabla discrepancies...');
    const { data: discrepancies, error: discrepanciesError } = await supabase
      .from('discrepancies')
      .select('*')
      .limit(3);

    if (discrepanciesError) {
      console.error('‚ùå ERROR EN TABLA discrepancies:', discrepanciesError.message);
    } else {
      console.log('‚úÖ Tabla discrepancies accesible');
      console.log('üìä Total discrepancies:', discrepancies?.length || 0);
      if (discrepancies && discrepancies.length > 0) {
        console.log('üìã Primer discrepancy:', JSON.stringify(discrepancies[0], null, 2));
      }
    }

    // Verificar tabla discrepancy_costs
    console.log('\nüîç Verificando tabla discrepancy_costs...');
    const { data: costs, error: costsError } = await supabase
      .from('discrepancy_costs')
      .select('*')
      .limit(3);

    if (costsError) {
      console.error('‚ùå ERROR EN TABLA discrepancy_costs:', costsError.message);
    } else {
      console.log('‚úÖ Tabla discrepancy_costs accesible');
      console.log('üìä Total costs:', costs?.length || 0);
      if (costs && costs.length > 0) {
        console.log('üìã Primer cost:', JSON.stringify(costs[0], null, 2));
      }
    }

    console.log('\nüìã PASO 4: An√°lisis de relaciones y datos completos');

    // Obtener datos con joins completos
    console.log('\nüîç Consulta con joins completos...');
    const { data: completeData, error: completeError } = await supabase
      .from('invoices')
      .select(`
        id,
        invoice_number,
        work_order_number,
        invoice_date,
        currency_code,
        reported_total,
        discrepancies (
          id,
          item_number,
          description,
          discrepancy_costs (
            id,
            cost_category_id,
            amount
          )
        )
      `)
      .limit(2);

    if (completeError) {
      console.error('‚ùå ERROR EN CONSULTA COMPLETA:', completeError.message);
    } else {
      console.log('‚úÖ Consulta con joins exitosa');
      console.log('üìä Registros con relaciones:', completeData?.length || 0);
      if (completeData && completeData.length > 0) {
        console.log('üìã Primer registro completo:', JSON.stringify(completeData[0], null, 2));
      }
    }

    console.log('\nüìã PASO 5: Verificaci√≥n de permisos y autenticaci√≥n');

    // Test de inserci√≥n (solo verificar permisos)
    console.log('\nüîç Verificando permisos de lectura/escritura...');
    const { data: testInsert, error: testError } = await supabase
      .from('invoices')
      .select('id')
      .limit(1);

    if (testError) {
      console.error('‚ùå ERROR DE PERMISOS:', testError.message);
    } else {
      console.log('‚úÖ Permisos de lectura correctos');
    }

    console.log('\nüéØ DIAGN√ìSTICO COMPLETADO');
    console.log('========================');

    // Resumen final
    console.log('\nüìä RESUMEN DE DIAGN√ìSTICO:');
    console.log('- Conexi√≥n a Supabase: ‚úÖ Funcional');
    console.log('- Vistas SQL: ‚úÖ Accesibles');
    console.log('- Tablas base: ‚úÖ Accesibles');
    console.log('- Relaciones: ‚úÖ Funcionales');
    console.log('- Permisos: ‚úÖ Correctos');

  } catch (error) {
    console.error('‚ùå ERROR CR√çTICO EN DIAGN√ìSTICO:', error);
    console.error('Stack:', error.stack);
  }
}

// Ejecutar diagn√≥stico
runDiagnosis().then(() => {
  console.log('\nüèÅ DIAGN√ìSTICO FINALIZADO');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå ERROR FATAL:', error);
  process.exit(1);
});